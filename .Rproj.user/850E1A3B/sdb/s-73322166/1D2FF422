{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Getting Started with Geographic Data Displays using R\"\nauthor: \"Vivek Patil\"\ndate: \"August 11, 2015\"\noutput: \n  ioslides_presentation:\n    highlight: tango\n    smaller: yes\n    widescreen: yes\ncss: mycustom.css\nruntime: shiny\n---\n\n```{r setup, include=FALSE}\nlibrary(knitr)\nopts_chunk$set(warning=FALSE, message=FALSE)\n\n```\n\n## Geographic Data Display\n\n* Points, Regions, Routes\n* Variables can be continuous and/or discrete data\n* Static or Interactive\n\n## Choropleths\n```{r}\nlibrary(choroplethr)\nlibrary(choroplethrMaps)\ndata(df_state_demographics)\nnames(df_state_demographics)\n```\n\n## Choropleths\n```{r}\nkable(head(df_state_demographics))\n```\n\n## Median Rent: State-level\n```{r}\n\ndfstatemedrent=df_state_demographics[,c(1,8)] # Median Rent\ncolnames(dfstatemedrent)=c(\"region\",\"value\")\nstate_choropleth(dfstatemedrent, title=\"Median Rent by State\")\n```\n\n## Median Rent: County-level\n\n```{r}\ndata(\"df_county_demographics\")\n#names(df_county_demographics)\n# Federal Information Processing Standard (FIPS) https://en.wikipedia.org/wiki/FIPS_county_code\nkable(head(df_county_demographics))\n```\n\n## Median Rent: County-level\n```{r}\ndfcountymedrent=df_county_demographics[,c(1,8)] \ncolnames(dfcountymedrent)=c(\"region\",\"value\")\ncounty_choropleth(dfcountymedrent, title=\"Median Rent by County\")\n```\n\n## Population: Specific County/ACTZ\n```{r}\nlibrary(choroplethrZip)#devtools::install_github(\"arilamstein/choroplethrZip\")\n#ZCTAs are generalized area representations of the United States Postal Service (USPS) ZIP code service areas\nlibrary(ggplot2)\ndata(\"df_zip_demographics\")\nkable(head(df_zip_demographics))\n```\n\n## Population: Washington\n\n```{r}\ndfzipmedrent=df_zip_demographics[,c(1,8)] \ncolnames(dfzipmedrent)=c(\"region\",\"value\")\nzip_choropleth(dfzipmedrent,state_zoom=\"washington\")+coord_map() #adds mercator projection\n```\n\n## Population: Spokane County FIPS 53063)\n\n```{r}\n\nzip_choropleth(dfzipmedrent, county_zoom=53063) + coord_map()\n```\n\n## Interactive map using leaflet, tigris and acs\n\n```{r echo=FALSE}\n# Kyle Walker's code has come in very handy\n# install and load the packages \nlibrary(leaflet)\nlibrary(tigris) #devtools::install_github('walkerke/tigris')\nlibrary(acs)\nlibrary(stringr)\n#lookup_code(\"Washington\",\"Spokane\") #\"FIPS code for Washington is '53' and the code for Spokane County is '063'.\"\nspcounty=tracts(state=\"53\",county=\"063\")\n# \n# #api.key.install(\" YOUR API KEY GOES HERE\") \n# \n# geography=geo.make(state=\"Washington\",county=\"Spokane\",tract=\"*\") # from acs package\n# rent_data <- acs.fetch(endyear = 2013, \n#                          geography = geography,\n#                          variable = \"B25064_001\")\n# \n# \n# \n# rent_df <- data.frame(paste0(as.character(rent_data@geography$state), \n#                                as.character(rent_data@geography$county), \n#                                rent_data@geography$tract), \n#                         rent_data@estimate)\n# \n# save(rent_df,file=\"rent_df.Rda\")\nload(\"rent_df.Rda\")\n\n\n\ncolnames(rent_df) <- c(\"GEOID\", \"hhrent\")\n\nrent_df$GEOID=as.character(rent_df$GEOID)\nrent_df$GEOID=str_replace(rent_df$GEOID,\"536\",\"5306\")\n\nspcounty_merged=geo_join(spcounty, rent_df, \"GEOID\", \"GEOID\")\n\n\npal <- colorQuantile(\"Blues\", NULL, n = 4)\npopup <- paste0(\"Median gross rent: \", as.character(spcounty_merged$hhrent))\n\nleaflet() %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(data = spcounty_merged, \n              fillColor = ~pal(spcounty_merged$hhrent), \n              fillOpacity = 0.7, \n              weight = 0.2, \n              popup = popup) %>%\n  addLegend(pal = pal, \n            values = spcounty_merged$hhrent, \n            position = \"bottomright\", \n            title = \"Median Gross Rent\")\n```\n  \n## Points\n\n```{r}\nthingstodo=read.table(text=\"\n                      Attraction  lat lon  Population\n                      Jepson  47.667268 -117.405114 45\n                      Starbucks  47.669088 -117.396847  50\n                      WSU 47.660960 -117.405697 250\n                      EWU 47.661061 -117.404044 400\",header=TRUE)\n```\n\n## Geocoding, if only address is available\n\n```{r}\n\nlibrary(ggmap)\n\nwhatislatlon=function(mydata,addressindata){\nlocs=geocode(as.character(unique(mydata[,addressindata])))\nlocs$address=unique(mydata[,addressindata])\nmydata$latitude=locs$lat[ match(mydata[,addressindata],locs$address)]\nmydata$longitude=locs$lon[ match(mydata[,addressindata],locs$address)]\nreturn(mydata)\n}\n```\n\n## That function works\n\n```{r}\n\nAddress=c(\"502 E Boone Ave, Spokane, WA, 99258\",\"502 E Boone Ave, Spokane, WA, 99258\")\nmydummydata=data.frame(Address=Address)\nmysmartdata=whatislatlon(mydummydata,\"Address\")\nkable(mysmartdata)\n```\n\n## A map of location of interest\n\n```{r }\nlocation=c(-117.402209,47.665330)\nmap=get_map(location=location,maptype=\"roadmap\",source=\"google\",zoom=16)\nspokanemap=ggmap(map)\nprint(spokanemap)\n```\n\n## Add Attractions\n```{r}\nspokanemap=spokanemap+geom_point(data=thingstodo,\n            aes(lon,lat,color=Attraction),size=5)\nprint(spokanemap)\n```\n\n## Some Cleaning\n\n```{r}\nspokanemap+theme(panel.grid.major = element_blank(),\n                 panel.grid.minor = element_blank(),\n                axis.text = element_blank(),axis.title = element_blank(),\n                axis.ticks = element_blank())\n```\n\n## A traveling student's route\n\n```{r}\nroutes=data.frame(x=thingstodo$lon,y=thingstodo$lat)\nnewmap=get_googlemap(center=location,zoom=16,\n                     markers=routes,\n                     path = routes,scale=2,maptype = \"satellite\")\nggmap(newmap,darken=.3)+geom_text(data=thingstodo,aes(lon,lat,label=Attraction),\n                                                  color=\"white\",size=3)\n```\n\n## R-Studio's `leaflet` package\n\n* Interface to `leaflet` JS  \n```{r}\nlibrary(leaflet) #rstudio package\nleaflet() %>% addTiles()\n```\n\n## Add our points of attraction\n```{r}\nleaflet() %>% addTiles()%>%addCircleMarkers(data=thingstodo)\n```\n\n## Give more information\n```{r}\nleaflet() %>% addTiles()%>%addCircleMarkers(data=thingstodo,popup=~Attraction,radius=~Population*.05)\n```\n\n## Markers\n```{r}\nleaflet() %>% addTiles()%>%addMarkers(data=thingstodo,popup=~Attraction)\n```\n\n## Routes\n\n```{r}\nleaflet() %>% addTiles()%>%addMarkers(data=thingstodo,popup=~Attraction)%>% \n  addPolylines(thingstodo$lon,thingstodo$lat)\n```\n\n## Few Controls\n```{r echo=FALSE}\nleaflet() %>% addTiles(group = \"OSM (default)\") %>%\n  addProviderTiles(\"Stamen.Toner\", group = \"Toner\") %>%\n  addProviderTiles(\"Stamen.TonerLite\", group = \"Toner Lite\") %>%\n  addMarkers(data=thingstodo,popup=~Attraction)%>% \n  addPolylines(thingstodo$lon,thingstodo$lat,group=\"Route\")%>%\n  addLayersControl(\n    baseGroups = c(\"OSM (default)\", \"Toner\", \"Toner Lite\"),\n    overlayGroups = c(\"Route\"),\n    options = layersControlOptions(collapsed = FALSE)\n  )%>% hideGroup(\"Route\")\n```\n\n\n## Leaflet+Shiny+DataTable\n\n```{r echo=FALSE}\nlibrary(shiny)\nlibrary(DT)\nlibrary(leaflet)\nload(\"thingstodo.Rda\")\nshinyApp(ui=fluidPage(\n  title = 'Cool Things To Do',\n  #DT::dataTableOutput('thingstodotable'),\n  leafletOutput(\"mymap\",width=\"100%\",height=800),\n                                  absolutePanel(id = \"controls\", class = \"panel panel-default\", fixed = TRUE,\n                                                draggable = TRUE, top = 60, left = \"auto\", right = 20, bottom = \"auto\",\n                                                width = 330, height = \"auto\",style='opacity: .9',\n                                                \n                                                h2(\"Things to Do\"),\n                                                DT::dataTableOutput('thingstodotable')\n                                                )\n  \n  ),\nserver=function(input, output, session) {\n \n  output$thingstodotable <- DT::renderDataTable(thingstodo[,c(1,4)], server=FALSE)\n  \n  output$mymap <- renderLeaflet({\n    filteredrows=input$thingstodotable_rows_all\n    selectedrows=input$thingstodotable_rows_selected\n    if(is.null(filteredrows)) return(invisible())    \n    myDataplot=thingstodo[filteredrows, ]\n    if(length(selectedrows)>0) {myDataplot=thingstodo[selectedrows,]}\n\n    if(is.null(myDataplot)) return()\n    \n    mymap = leaflet(data=myDataplot) %>% #,width = \"100%\", height = \"100%\") %>%   \n      addTiles() %>% \n      setView(-117.4, 47.668, zoom = 13) %>%\n      addMarkers(popup=~Attraction)\n  })\n  \n})\n\n\n\n\n\n```\n\n\n## Blog example 1: Air Pollution Levels\n[http://patilv.com/airpollution/](http://patilv.com/airpollution/)\n<iframe src=\"http://patilv.github.io/Airpollutionpm/topcitiespm10map.html\"></iframe>\n\n## Blog example 2: Mortality Rates of Children under 5 per 1000 live births\n\n[http://patilv.com/MortalityUnder5/](http://patilv.com/MortalityUnder5/)\n<iframe src=\"http://bl.ocks.org/patilv/raw/410a1de459998f35599a/\"></iframe>\n\n## Blog example 3: Animated Choropleths\n\n[http://bit.ly/patilanimatedchoropleths](http://bit.ly/patilanimatedchoropleths)\n\n## Blog example 4: Great Circles\n[http://patilv.com/USOpenCountries/](http://patilv.com/USOpenCountries/)\n<img src=\"playernationalitymap.png\" width=900 height=700>\n\n## Code used is borrowed from many folks including: \n\n* R-Studio: [https://rstudio.github.io/leaflet/](https://rstudio.github.io/leaflet/)\n* Ari Lamstein: [http://www.arilamstein.com/](http://www.arilamstein.com/)\n* Kyle Walker: [http://walkerke.github.io/](http://walkerke.github.io/)\n* Erik Erhardt: [http://statacumen.com/](http://statacumen.com/)\n<h2>Thanks due to many package developers and the wonderful R community.\n\n\n\n",
    "created" : 1439487762179.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2991403045",
    "id" : "1D2FF422",
    "lastKnownWriteTime" : 1439419172,
    "path" : "C:/Users/patil.GONZAGA/Dropbox/Reverything/INRUG-Geographic/INRUG-Mapping-Shiny.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}